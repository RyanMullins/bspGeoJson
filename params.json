{"name":"Bspgeojson","tagline":"Creates a bivariate scatter plot from a GeoJSON Feature Collection","body":"Bivariate Scatter Plots for GeoJSON Feature Collections\r\n=======================================================\r\n\r\nThis is an extremely simple plug-in for D3 that generates an SVG-based bivariate scatter plot for a [GeoJSON][geojson] [Feature Collection][geojsonfc]. \r\n\r\nThis code was heavily influenced by [Mike Bostock's][bostock] [Scatterplots][bostocksp] example. In fact, you might even say I just straight-up copied the code and changed it to meet my needs. Because, that's exactly what I did. Thank you, Mike, for this example. \r\n\r\n## API\r\n\r\n<a href=\"\">#</a> d3.**bspGeoJson**(_collection_, _options_)\r\n\r\nCreate a bivariate scatter plot (BSP) that compares two properties of the [Features][geojsonf] in a [Feature Collection][geojsonfc]. Returns a reference to the D3 selection for the appended SVG with two additional functions described below.\r\n\r\nThe _collection_ parameter is required and **must** be a GeoJSON Feature collection. Behavior is undefined if this parameter is not a Feature Collection.\r\n\r\nThe _options_ parameter is required and allows you to define the following properties. Properties that must be defined are listed in bold face. \r\n\r\n* _**var1**_ : [String] The property that will be mapped to the x-axis.\r\n* _**var2**_ : [String] The property that will be mapped to the y-axis.\r\n* _**colorizer**_ : [Function] Determines the color for each dot based the classification of each variable.\r\n* _**classifier**_ : [Function] Determines the class of a dot given a variable name and value.\r\n* _id_ : [String] The ID of the container for the BSP, defaults to 'body'\r\n* _margin_ : [Array] Array of numbers, must specify all; [top, right, bottom, left], defaults to [30, 10, 10, 10]\r\n* _width_ : [Number] Width of the plot, defaults to 400 pixels\r\n* _height_ : [Number] Height of the plot, defaults to 400 pixels. \r\n* _radius_ : [Number] Radius of each dot on the plot, defaults to 3.5px.\r\n* _domainx_ : [Array | String] Defines the domain of the x-axis\r\n    * An array of length two defines the lower and upper bounds\r\n    * Using the string \"max\" defines the domain from 0 to the maximum value for that property in the collection, [nice-ified][nice].\r\n    * All other values, including null, defines the domain as the extents of the property values in the collection, [nice-ified][nice].\r\n* _domainy_ : [Array | String] Defines the domain of the y-axis\r\n    * An array of length two defines the lower and upper bounds\r\n    * Using the string \"max\" defines the domain from 0 to the maximum value for that property in the collection, [nice-ified][nice].\r\n    * All other values, including null, defines the domain as the extents of the property values in the collection, [nice-ified][nice].\r\n* _ticksx_ : [Number] The number of tick marks along the x-axis.\r\n* _ticksy_ : [Number] The number of tick marks along the y-axis.\r\n* _name1_ : [String] A more readable label that is used for the x-axis.\r\n* _name2_ : [String] A more readable label that is used for the y-axis.\r\n* _linker_ : [Function] Details to come...\r\n\r\n<a href=\"\">#</a> bspGeoJson.**updateVariables**(_var1_, _var2_)\r\n\r\nUpdates the BSP to compare two different properties of the [Features][geojsonf] in a [Feature Collection][geojsonfc]. \r\n\r\n<a href=\"\">#</a> bspGeoJson.**updateVariablesWithNames**(_var1_, _name1_, _var2_, _name2_)\r\n\r\nUpdates the BSP to compare two different properties of the [Features][geojsonf] in a [Feature Collection][geojsonfc] including more readable names.\r\n\r\n### Linking Functionality\r\n\r\nDetails to come.\r\n\r\n### Example Usage\r\n\r\n```HTML \r\n\r\n<html lang=\"en\">\r\n<head>\r\n  <script src=\"//d3.v3.min.js\" charset=\"utf-8\"></script>\r\n  <script src=\"//d3.bspGeoJson.min.js\"></script>\r\n  <link href=\"//d3.bspGeoJson.css\" rel='stylesheet' />\r\n</head>\r\n<body>\r\n  <script type=\"text/javascript\">\r\n    d3.json('collection.json', function (error, collection) {\r\n      if (error) { \r\n        return console.warn(error); \r\n      }\r\n\r\n      d3.bspGeoJson(collection, {\r\n        'var1' : 'gdp',\r\n        'var2' : 'gnp',\r\n        'classifier' : classifier,\r\n        'colorizer' : colorizer\r\n      });\r\n    })\r\n\r\n    function classifier (name, value) {\r\n        ...\r\n    }\r\n\r\n    function colorizer (cls1, cls2) {\r\n        ...\r\n    }\r\n\r\n  </script>\r\n</body>\r\n</html>\r\n\r\n```\r\n\r\n<!-- Links -->\r\n\r\n[bostock]: http://bost.ocks.org/mike/\r\n[bostocksp]: http://bl.ocks.org/mbostock/3887118\r\n[geog461w]: http://bulletins.psu.edu/undergrad/courses/G/GEOG/461W\r\n[geog461wfp]: http://www.geovista.psu.edu/resources/geog461w.html\r\n[geojson]: http://geojson.org/\r\n[geojsonf]: http://geojson.org/geojson-spec.html#feature-objects\r\n[geojsonfc]: http://geojson.org/geojson-spec.html#feature-collection-objects\r\n[nice]: https://github.com/mbostock/d3/wiki/Quantitative-Scales#linear_nice\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}